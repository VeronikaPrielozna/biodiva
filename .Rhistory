maxA2<-max(table1[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
print(table1)
rownames(table1)<-c("F1", "F2", "Chao1")
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 0)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-signif(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
?round
Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chao1(test_dat)
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
return(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(table1, plot = F)
barplot(table1[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
round(Chaovysl, digits = 2)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
plot(table1[3,])
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,])
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,], col = "blue")
abline(S)
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,], col = "blue")
curve(S)
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,], col = "blue")
curve(S)
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,], col = "blue")
curve(table[3,]~S)
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,], col = "blue")
curve(S~table[3,])
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(table1[3,]~S, col = "blue")
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
boxplot(table1[3,]~S, col = "blue")
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
boxplot(S~table1[3,])
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Chao1<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
S<-apply(x, 2, function(x1) sum(x1>0))
Sobs<-(F1^2)/(2*F2)
table1<-rbind(F1,F2,Sobs)
rownames(table1)<-c("F1", "F2", "Chao1")
table1<-round(table1, digits = 2)
print(table1)
print(S)
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 1)
plot(S~table1[3,])
}
return(table1)
}
Chaovysl<-Chao1(test_dat)
Abundance<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
TotalA<-apply(x, 2, function(f5) sum(f5))
F1<-apply(x, 2, function(f1) sum(f1==1))
F2A<-apply(x, 2, function(f2) sum(f2==2))*2
OtherA<-TotalA-F1-F2A
Atab<-rbind(F1,F2A,OtherA,TotalA)
rownames(Atab)<-c("F1", "F2", "Other", "Total")
maxA<-max(Atab[1,] + Atab[2,])
maxA2<-max(Atab[4,])
# if (graph == T){
#   par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
#   posgr = barplot(Atab, plot = F)
#   barplot(Atab[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
#           args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
#   text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
# }
# return(Atab)
ui <- fluidPage(
# Application title
titlePanel("Znečištění"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("rozsah",
"Rozsah:",
min = 1,
max = nrow(Atab),
value = c(1, nrow(Atab))),
selectInput("promenna",
"Proměnná:",
choices = c("PM10", "NOx", "SO2")),
checkboxInput("log",
"Logaritmická transformace")
),
mainPanel(
tabsetPanel(
tabPanel("Graf",
plotOutput("distPlot"),
p("Počet vybraných řádků:", textOutput("pocet"))),
tabPanel("Tabulka", dataTableOutput("tabulka"))
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
vybranaData <- reactive({
i <- seq(from = input$rozsah[1], to = input$rozsah[2])
d <- data.frame(id = data$id,
y = data[[input$promenna]])
d <- d[i, ]
if (input$log){
d$y <- log(d$y)
}
return(d)
})
nazev <- reactive({
n <- input$promenna
if (input$log){
n <- paste0('log(', n, ')')
}
return(n)
})
output$pocet <- renderText({
d <- vybranaData()
return(nrow(d))
})
output$distPlot <- renderPlot({
d <- vybranaData()
g <- ggplot(d) +
aes(x = id, y = y) +
geom_line() +
ylab(nazev())
return(g)
})
output$tabulka <- renderDataTable({
i <- seq(from = input$rozsah[1], to = input$rozsah[2])
data[i,]
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
Abundance()
LoadData<-function(file="clipboard",first.col=2, na2null=T, attrib=T) {
cat(paste("Copy data into cliboard."))
invisible(readline(prompt="Press [enter] to continue. "))
tryCatch(silent=T,
expr = {
x<-read.table(file, h=T, sep = "\t")
message("Dataset successfully uploaded.")
},
error = function(e){
message("Dataset inaccurately uploaded, Try again.")
print(e)
},
warning = function(w){
message("Warning! Dataset inaccurately uploaded. Try again.")
print(w)
},
finally = {
attr(x,"Spec_col")<-first.col:ncol(x)
attr(x, "Number of species")<-nrow(x)
attr(x,"Number of samples")<-ncol(x)-1
y<-unlist(lapply(as.list(first.col:ncol(x)),function(x1) is.numeric((x[,x1]))))
if(all(y, na.rm = TRUE)==F){
colbad<-which(y==FALSE) + first.col-1
cat(paste("Samples",paste(names(x)[colbad],collapse=","),"are not numeric"))
cat("\n")
answ=readline(prompt="Continue and skip non-numeric columns? y/n  ")
if(answ=="y") x<-x[-colbad] else stop(paste("Function was terminated. Try to fix the dataset."))
}
if(na2null==T) x[is.na(x)]<-0
if (attrib==T){
print("Attributes of table")
print(attributes(x))
}
cat(paste("Short data:"), "\n")
print(x[1:5,])
cat("\n")
message("You can continue.")
}
)
return(x)
}
LoadData()
data<-LoadData()
Abundance(data)
