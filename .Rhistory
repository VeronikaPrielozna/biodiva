tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB), maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(posgr, Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB), maxB * 1.2), xlim = c(1 * 0.8 , ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(posgr, Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(posgr, Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
?text
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(1 : ncol(HB), Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
BR
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(1 : ncol(HB), Hbmax, lab = Hbmax, cex = 0.65, pos = 3, srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(1 : ncol(HB), Hbmax, lab = Hbmax, cex = 0.65, pos = 1, srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
brillouin <- function(df, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- df[, first.col : ncol(df)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(1 : ncol(HB), Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.25,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
SI <- simpson(data[,1:5])
SI <- simpson(data)
soren <- function(df, plot = T, cex = 0.75){
data.jac <- df[,2:ncol(df)]
ncplot <- ncol(data.jac)
m1 <- matrix(0, ncplot, ncplot)
for (i in 1:(ncplot - 1)){
x1 <- data.jac[,i]
for (j in (i + 1):ncplot){
x2 <- data.jac[,j]
m1[i,j] <- 2 * sum(x1 > 0 & x2 > 0) / (sum(x1 > 0) + sum(x2 > 0))
m1[j,i] <- sum(abs(x1 - x2)) / sum(x1 + x2)
}
}
m1 <- round(m1, digits = 2)
par(mfrow = c(1,1), mar = c(1, 4, 4, 1), mgp = c(1,0,0))
plot(0:ncplot, 0:ncplot, type = "n", axes = 0,
xlab = "", ylab = "")
uv <- ceiling(max(m1[upper.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[upper.tri(m1)]) * ncplot) / ncplot
m2 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
uv <- ceiling(max(m1[lower.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[lower.tri(m1)]) * ncplot) / ncplot
m3 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
if (plot == T){
for (i in 1:ncplot) {
for(j in 1:ncplot) {
if(j > i) mcol = as.character(cut(m1[i,j], breaks = m2, labels = heat.colors(11)[11:1]))
if(j == i) mcol = "black"
if (j < i) mcol = as.character(cut(m1[i,j], breaks = m3, labels = heat.colors(11)[11:1]))
rect(j - 1, ncplot - i, j, ncplot - i + 1, border = "white", col = mcol)
text(j - 0.5, ncplot - i + 0.5, label = m1[i,j], cex = cex)
}
}
axis(3,at = seq(0.5, ncplot, by = 1),lab = colnames(data.jac),las = 3, lty = 0)
axis(2, at = seq(ncplot-0.5, 0), lab = colnames(data.jac), las = 2, lty = 0)
axis(4, at = ncplot / 2, lab = "Sorensen index", las = 3, line = -0.5, tick = F, cex = 1)
axis(1, at = ncplot / 2, lab = "Bray-Curtis index ", las = 1, line = -0.25, tick = F, cex = 1)
}
colnames(m1) <- colnames(data.jac)
rownames(m1) <- colnames(data.jac)
return(m1)
}
SO <- soren(data)
soren <- function(df, plot = T, cex = 0.4){
data.jac <- df[,2:ncol(df)]
ncplot <- ncol(data.jac)
m1 <- matrix(0, ncplot, ncplot)
for (i in 1:(ncplot - 1)){
x1 <- data.jac[,i]
for (j in (i + 1):ncplot){
x2 <- data.jac[,j]
m1[i,j] <- 2 * sum(x1 > 0 & x2 > 0) / (sum(x1 > 0) + sum(x2 > 0))
m1[j,i] <- sum(abs(x1 - x2)) / sum(x1 + x2)
}
}
m1 <- round(m1, digits = 2)
par(mfrow = c(1,1), mar = c(1, 4, 4, 1), mgp = c(1,0,0))
plot(0:ncplot, 0:ncplot, type = "n", axes = 0,
xlab = "", ylab = "")
uv <- ceiling(max(m1[upper.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[upper.tri(m1)]) * ncplot) / ncplot
m2 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
uv <- ceiling(max(m1[lower.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[lower.tri(m1)]) * ncplot) / ncplot
m3 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
if (plot == T){
for (i in 1:ncplot) {
for(j in 1:ncplot) {
if(j > i) mcol = as.character(cut(m1[i,j], breaks = m2, labels = heat.colors(11)[11:1]))
if(j == i) mcol = "black"
if (j < i) mcol = as.character(cut(m1[i,j], breaks = m3, labels = heat.colors(11)[11:1]))
rect(j - 1, ncplot - i, j, ncplot - i + 1, border = "white", col = mcol)
text(j - 0.5, ncplot - i + 0.5, label = m1[i,j], cex = cex)
}
}
axis(3,at = seq(0.5, ncplot, by = 1),lab = colnames(data.jac),las = 3, lty = 0)
axis(2, at = seq(ncplot-0.5, 0), lab = colnames(data.jac), las = 2, lty = 0)
axis(4, at = ncplot / 2, lab = "Sorensen index", las = 3, line = -0.5, tick = F, cex = 1)
axis(1, at = ncplot / 2, lab = "Bray-Curtis index ", las = 1, line = -0.25, tick = F, cex = 1)
}
colnames(m1) <- colnames(data.jac)
rownames(m1) <- colnames(data.jac)
return(m1)
}
SO <- soren(data)
abundance <- function(x, first.col = 2, plot = T, legver = 0, leghor = 0, ylab = "Abundance", xlab = "Samples",
col = c("gray0", "gray48", "gray84"), lncol = 3, ...){
x <- x[,first.col:ncol(x)]
TotalA <- apply(x, 2, function(f5) sum(f5))
F1 <- apply(x, 2, function(f1) sum(f1 == 1))
F2A <- apply(x, 2, function(f2) sum(f2 == 2)) * 2
OtherA <- TotalA - F1 - F2A
Atab <- rbind(F1,F2A,OtherA,TotalA)
rownames(Atab) <- c("F1", "F2", "Other", "Total")
maxA <- max(Atab[1,] + Atab[2,])
maxA2 <- max(Atab[4,])
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,], legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"),
ylim = c(0, maxA2 * 1.2), col = col,
args.legend = list(bty = "n", x = posgr[leghor], y = legver, ncol = lncol, xjust = 0), ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
text(posgr, TotalA, lab = TotalA, cex = 0.7, pos = 3)
}
Atab <- as.data.frame(t(Atab))
return(Atab)
}
AB <- abundance(data, legh = 130, legl = 12)
abundance <- function(x, first.col = 2, plot = T, legver = 0, leghor = 0, ylab = "Abundance", xlab = "Samples",
col = c("gray0", "gray48", "gray84"), lncol = 3, ...){
x <- x[,first.col:ncol(x)]
TotalA <- apply(x, 2, function(f5) sum(f5))
F1 <- apply(x, 2, function(f1) sum(f1 == 1))
F2A <- apply(x, 2, function(f2) sum(f2 == 2)) * 2
OtherA <- TotalA - F1 - F2A
Atab <- rbind(F1,F2A,OtherA,TotalA)
rownames(Atab) <- c("F1", "F2", "Other", "Total")
maxA <- max(Atab[1,] + Atab[2,])
maxA2 <- max(Atab[4,])
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,], legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"),
ylim = c(0, maxA2 * 1.2), col = col,
args.legend = list(bty = "n", x = posgr[leghor], y = legver, ncol = lncol, xjust = 0), ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
text(posgr, TotalA, lab = TotalA, cex = 0.7, pos = 3)
}
Atab <- as.data.frame(t(Atab))
return(Atab)
}
AB <- abundance(data, legh = 130, legl = 12)
AB <- abundance(data, legver = 130, leghor = 12)
AB <- abundance(data, legver = 130, leghor = 12)
AB <- abundance(data)
abundance <- function(x, first.col = 2, plot = T, legver = 1, leghor = 1, ylab = "Abundance", xlab = "Samples",
col = c("gray0", "gray48", "gray84"), lncol = 3, ...){
x <- x[,first.col:ncol(x)]
TotalA <- apply(x, 2, function(f5) sum(f5))
F1 <- apply(x, 2, function(f1) sum(f1 == 1))
F2A <- apply(x, 2, function(f2) sum(f2 == 2)) * 2
OtherA <- TotalA - F1 - F2A
Atab <- rbind(F1,F2A,OtherA,TotalA)
rownames(Atab) <- c("F1", "F2", "Other", "Total")
maxA <- max(Atab[1,] + Atab[2,])
maxA2 <- max(Atab[4,])
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,], legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"),
ylim = c(0, maxA2 * 1.2), col = col,
args.legend = list(bty = "n", x = posgr[leghor], y = legver, ncol = lncol, xjust = 0), ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
text(posgr, TotalA, lab = TotalA, cex = 0.7, pos = 3)
}
Atab <- as.data.frame(t(Atab))
return(Atab)
}
AB <- abundance(data)
abundance <- function(x, first.col = 2, plot = T, legver = 1, leghor = 1, ylab = "Abundance", xlab = "Samples",
col = c("gray0", "gray48", "gray84"), lncol = 3, ...){
x <- x[,first.col:ncol(x)]
TotalA <- apply(x, 2, function(f5) sum(f5))
F1 <- apply(x, 2, function(f1) sum(f1 == 1))
F2A <- apply(x, 2, function(f2) sum(f2 == 2)) * 2
OtherA <- TotalA - F1 - F2A
Atab <- rbind(F1,F2A,OtherA,TotalA)
rownames(Atab) <- c("F1", "F2", "Other", "Total")
maxA <- max(Atab[1,] + Atab[2,])
maxA2 <- max(Atab[4,])
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,], legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"),
ylim = c(0, maxA2 * 1.2), col = col,
args.legend = list(bty = "n", x = posgr[leghor], y = legver, ncol = lncol, xjust = 0), ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4.5)
text(posgr, TotalA, lab = TotalA, cex = 0.7, pos = 3)
}
Atab <- as.data.frame(t(Atab))
return(Atab)
}
AB <- abundance(data)
abundance <- function(x, first.col = 2, plot = T, legver = 1, leghor = 1, ylab = "Abundance", xlab = "Samples",
col = c("gray0", "gray48", "gray84"), lncol = 3, ...){
x <- x[,first.col:ncol(x)]
TotalA <- apply(x, 2, function(f5) sum(f5))
F1 <- apply(x, 2, function(f1) sum(f1 == 1))
F2A <- apply(x, 2, function(f2) sum(f2 == 2)) * 2
OtherA <- TotalA - F1 - F2A
Atab <- rbind(F1,F2A,OtherA,TotalA)
rownames(Atab) <- c("F1", "F2", "Other", "Total")
maxA <- max(Atab[1,] + Atab[2,])
maxA2 <- max(Atab[4,])
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,], legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"),
ylim = c(0, maxA2 * 1.2), col = col,
args.legend = list(bty = "n", x = posgr[leghor], y = legver, ncol = lncol, xjust = 0), ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
text(posgr, TotalA, lab = TotalA, cex = 0.7, pos = 3)
}
Atab <- as.data.frame(t(Atab))
return(Atab)
}
AB <- abundance(data)
AB <- abundance(data, legver = 100)
RI <- richness(data, legl = 12, legh = 140)
DO <- dominance(data, legl = 12, legh = 120)
DO <- dominance(data, table = "A", legl = 12, legh = 120)
MA <- margalef(data)
ME <- menhinick(data)
SA <- shannon(data, table = "E")
SI <- simpson(data)
BR <- brillouin(data)
JA <- jacren(data)
SO <- soren(data)
AB <- abundance(data, legver = 100)
