maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = col, ...)
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
SI <- simpson(data)
simpson <- function(x, first.col = 2, plot = T, ylab = "Simpson's index value", xlab = "Samples", col = "gray",...){
data.simps <- x[,(attributes(x)$"First column"):ncol(x)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5), las = 2)
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = col, ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
SI <- simpson(data)
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(DMg_m, plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = Dmg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
MA
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(DMg_m, plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = Dmg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(as.table(t(DMg_m)), plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = Dmg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(as.table(t(DMg_m)), plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = DMg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(as.table(t(DMg_m)), plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = DMg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 3)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
print(DMg)
print(DMg_m)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(as.table(t(DMg_m)), plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = DMg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
print(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(DMg, plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = DMg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
print(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(as.table(t(DMg_m)), plot = F)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m, lab = DMg_m, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
margalef <- function(x, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
print(DMg)
DMg_m_posgr <- as.table(t(DMg_m))
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(DMg_m_posgr, plot = F)
barplot(DMg_m_posgr, ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
text(posgr, DMg_m_posgr, lab = DMg_m_posgr, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
MA <- margalef(data)
menhinick <- function(x, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index value", xlab = "Samples", ...){
x <- x[,(attributes(x)$"First column"):ncol(x)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMn_m <- matrix()
for (i in 1:ncol(tab)){
DMn <- (tabS[,i]) / sqrt(tabN[,i])
DMn_m <- rbind(DMn_m, DMn)
}
DMn_m <- as.data.frame(DMn_m[2:nrow(DMn_m),1])
colnames(DMn_m) <- "D"
DMn_m <- round(DMn_m, digits = 2)
DMn <- DMn_m[,1,drop = F]
rownames(DMn) <- as.vector(colnames(tab))
maxMn <- max(DMn)
plot_Dmn <- as.table(t(DMn_m))
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
posgr <- barplot(plot_Dmn, plot = F)
barplot(plot_Dmn, ylim = c(0, maxMn * 1.25), names.arg = rownames(DMn), col = col, xaxs = "r", ...)
text(posgr, plot_Dmn, lab = plot_Dmn, cex = 0.65, adj = c(-0.2,0.3), srt = 90)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
ME <- menhinick(data)
posgr <- barplot(Dc, plot = F)
SI <- simpson(data)
brillouin <- function(x, first.col = 2, plot = T, ylab = "Brillouin's index", xlab = "Samples", col = "black",...){
data <- x[,(attributes(x)$"First column"):ncol(x)]
tab <- data.frame(mat <- matrix(nrow = 3))
for (i in 1:ncol(data)) {
com <- data[,i]
N <- sum(com)
Hb <- (lfactorial(N) - sum(lfactorial(com))) / N
k <- length(com)
c <- N %/% k
d <- N %% k
Hbmax <- (lfactorial(N) - (k - d) * lfactorial(c) - d * lfactorial(c + 1)) / N
Even <- Hb / Hbmax
vec <- c(Hb, Hbmax, Even)
tab <- cbind(tab, new_col = vec)
}
tab <- tab[, -1]
colnames(tab) <- colnames(data)
rownames(tab) <- c("HB", "HBmax", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
HB <- as.matrix(tab[1,])
Hbmax <- tab[2,]
maxB <- max(Hbmax)
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
plot(NULL,ylim = c(min(HB) * 0.8, maxB * 1.2), xlim = c(1, ncol(HB)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 3.5)
posgr = barplot(HB, plot = F)
points(c(1:ncol(HB)), tab[1,], pch = 20, cex = 1, col = col)
axis(1, at = 1:ncol(HB), lab = colnames(HB))
for (i in 1:ncol(HB)){
arrows(i, HB[,i], i, Hbmax[,i], angle = 90, code = 2, length = 0.05, col = col)
}
text(1 : ncol(HB), Hbmax, lab = Hbmax, cex = 0.65, adj = c(-0.25,0.3), srt = 90)
}
tab <- as.data.frame(t(tab))
return(tab)
}
BR <- brillouin(data)
jacren <- function(x, plot = T, cex = 0.4){
data.jac <- x[, attributes(x)$"First column" : ncol(x)]
ncplot <- ncol(data.jac)
m1 <- matrix(0, ncplot, ncplot)
for (i in 1:(ncplot - 1)){
x1 <- data.jac[,i]
for (j in (i + 1) : ncplot){
x2 <- data.jac[,j]
m1[i,j] <- sum(x1 > 0 & x2 > 0) / sum(x1 > 0 | x2 > 0)
m1[j,i] <- sum(apply(cbind(a = x1 / sum(x1), b = x2 / sum(x2)), 1, min))
m1 <- round(m1, digits = 2)
}
}
m1 <- round(m1, digits = 2)
par(mfrow = c(1,1), mar = c(1, 4, 4, 1), mgp = c(1, 0, 0))
plot(0 : ncplot, 0 : ncplot, type = "n", axes = 0, xlab = "",
ylab = "")
uv <- ceiling(max(m1[upper.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[upper.tri(m1)]) * ncplot) / ncplot
m2 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
uv <- ceiling(max(m1[lower.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[lower.tri(m1)]) * ncplot) / ncplot
m3 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
if (plot == T){
for (i in 1:ncplot) {
for(j in 1:ncplot) {
if(j > i) mcol = as.character(cut(m1[i, j], breaks=m2, labels = heat.colors(11)[11 : 1]))
if(j == i) mcol = "black"
if (j < i) mcol = as.character(cut(m1[i, j], breaks = m3, labels = heat.colors(11)[11 : 1]))
rect(j - 1, ncplot - i, j, ncplot - i + 1, border = "white", col = mcol)
text(j - 0.5, ncplot - i + 0.5, label = m1[i, j], cex = cex)
}
}
axis(3, at = seq(0.5, ncplot, by = 1), lab = colnames(data.jac), las = 2, lty = 0)
axis(2, at = seq(ncplot - 0.5, 0), lab = colnames(data.jac), las = 2, lty = 0)
axis(4, at = ncplot / 2, lab = "Jaccard index", las = 3, line = -0.5, tick = F)
axis(1, at = ncplot / 2, lab = "Renkonen index", las = 1, line = -0.25, tick = F)
}
colnames(m1) <- colnames(data.jac)
rownames(m1) <- colnames(data.jac)
return(m1)
}
JA <- jacren(data)
soren <- function(x, plot = T, cex = 0.4){
data.jac <- x[, attributes(x)$"First column" : ncol(x)]
ncplot <- ncol(data.jac)
m1 <- matrix(0, ncplot, ncplot)
for (i in 1:(ncplot - 1)){
x1 <- data.jac[,i]
for (j in (i + 1):ncplot){
x2 <- data.jac[,j]
m1[i,j] <- 2 * sum(x1 > 0 & x2 > 0) / (sum(x1 > 0) + sum(x2 > 0))
m1[j,i] <- sum(abs(x1 - x2)) / sum(x1 + x2)
}
}
m1 <- round(m1, digits = 2)
par(mfrow = c(1,1), mar = c(1, 4, 4, 1), mgp = c(1,0,0))
plot(0:ncplot, 0:ncplot, type = "n", axes = 0,
xlab = "", ylab = "")
uv <- ceiling(max(m1[upper.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[upper.tri(m1)]) * ncplot) / ncplot
m2 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
uv <- ceiling(max(m1[lower.tri(m1)]) * ncplot) / ncplot
lv <- floor(min(m1[lower.tri(m1)]) * ncplot) / ncplot
m3 <- seq(lv - (uv - lv) / ncplot, uv, length = 12)
if (plot == T){
for (i in 1:ncplot) {
for(j in 1:ncplot) {
if(j > i) mcol = as.character(cut(m1[i,j], breaks = m2, labels = heat.colors(11)[11:1]))
if(j == i) mcol = "black"
if (j < i) mcol = as.character(cut(m1[i,j], breaks = m3, labels = heat.colors(11)[11:1]))
rect(j - 1, ncplot - i, j, ncplot - i + 1, border = "white", col = mcol)
text(j - 0.5, ncplot - i + 0.5, label = m1[i,j], cex = cex)
}
}
axis(3,at = seq(0.5, ncplot, by = 1),lab = colnames(data.jac),las = 3, lty = 0)
axis(2, at = seq(ncplot-0.5, 0), lab = colnames(data.jac), las = 2, lty = 0)
axis(4, at = ncplot / 2, lab = "Sorensen index", las = 3, line = -0.5, tick = F, cex = 1)
axis(1, at = ncplot / 2, lab = "Bray-Curtis index ", las = 1, line = -0.25, tick = F, cex = 1)
}
colnames(m1) <- colnames(data.jac)
rownames(m1) <- colnames(data.jac)
return(m1)
}
SO <- soren(data)
devtools::load_all(".")
data <- loadData()
data <- loadData()
AB <- abundance(data, legver = 100, leghor = 1)
RI <- richness(data, legver = 30, leghor = 1)
DO <- dominance(data, leghor = 1, legver = 30)
DO <- dominance(data, table = "A", leghor = 1, legver = 30)
DO <- dominance(data, table = "R", plot = "R", leghor = 1, legver = 1.2)
MA <- margalef(data)
ME <- menhinick(data)
SA <- shannon(data, table = "E")
SI <- simpson(data)
BR <- brillouin(data)
JA <- jacren(data)
attributes(data)
JA <- jacren(data)
JA
data
data[,1:10]
data[,1:11]
JA <- jacren(data[,1:11])
data <- loadData()
data
JA <- jacren(data)
JA <- jacren(data, cex = 0.7)
JA
devtools::load_all(".")
test_data
devtools::load_all(".")
data <- loadData()
JA <- jacren(data, cex = 0.7)
JA <- jacren(data, cex = 0.3)
str(JA)
JA
View(JA)
JA
View(JA)
str(JA)
attributes(JA)
JA[[1]]
JA[1]
JA[1,1]
summary(JA)
