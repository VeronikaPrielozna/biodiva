minH <- min(Htable[2,])
maxH <- max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH, maxH * 1.1),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
points(c(1:ncol(Htable)), Htable[1,], pch = 16, col = col)
table1 <- as.matrix(Htable[2,])
table2 <- as.matrix(Htable[3,])
axis(1, at = 1:ncol(data.shan), lab = colnames(data.shan))
for (i in 1:ncol(table1)){
arrows(i,table1[,i],i,table2[,i],angle = 90,code = 3,length = 0.08)
}
}
if (table == "CE"){
HEtable <- list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == "C"){
return(Htable)
}
if(table == "E"){
return(Etable)
}
}
S <- shannon(test_data.1, col = "red")
shannon <- function(df, first.col = 2, table = "CE", plot = T,
log_base = 1, ylab = "Shannon index", col = "black", ...){
data.shan <- df[, first.col : ncol(df)]
mat1 <- matrix(nrow = 3)
Htable <- data.frame(mat1)
mat2 <- matrix(nrow = 2)
Etable <- data.frame(mat2)
if (log_base == 1){
Base <- sum(1 / factorial(0:100))
}
if (log_base == 2){
Base <- 2
}
for(x in 1:ncol(data.shan)){
x <- data.shan[, x]
n <- sum(x[x > 0])
S <- length(x[x > 0])
Hshan <- - sum(x[x > 0] / n * log(x[x > 0] / n, Base))
Hmin <- -((n-S+1) / n * log((n - S + 1) / n, Base) + (S - 1) / n * log(1 / n, Base))
Hmax <- log(S, Base)
Even1 <- Hshan / (Hmax)
Even2 <- (Hshan - Hmin) / (Hmax-Hmin)
vec1 <- c(Hshan, Hmin, Hmax)
Htable <- cbind(Htable, new_col = vec1)
vec2 <- c(Even1, Even2)
Etable <- cbind(Etable, new_col = vec2)
}
Htable <- Htable[, -1]
colnames(Htable) <- colnames(data.shan)
rownames(Htable) <- c("H´","Hmin","Hmax")
Htable <- round(Htable, digits = 2)
Etable <- Etable[,-1]
colnames(Etable) <- colnames(data.shan)
rownames(Etable) <- c("Even1","Even2")
Etable <- round(Etable, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
minH <- min(Htable[2,])
maxH <- max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH, maxH * 1.1),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
points(c(1:ncol(Htable)), Htable[1,], pch = 16, col = col)
table1 <- as.matrix(Htable[2,])
table2 <- as.matrix(Htable[3,])
axis(1, at = 1:ncol(data.shan), lab = colnames(data.shan))
for (i in 1:ncol(table1)){
arrows(i,table1[,i],i,table2[,i],angle = 90,code = 3,length = 0.08, col = col)
}
}
if (table == "CE"){
HEtable <- list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == "C"){
return(Htable)
}
if(table == "E"){
return(Etable)
}
}
S <- shannon(test_data.1, col = "red")
shannon <- function(df, first.col = 2, table = "CE", plot = T,
log = "e", ylab = "Shannon index", col = "black", ...){
data.shan <- df[, first.col : ncol(df)]
mat1 <- matrix(nrow = 3)
Htable <- data.frame(mat1)
mat2 <- matrix(nrow = 2)
Etable <- data.frame(mat2)
if (log == "e"){
Base <- sum(1 / factorial(0:100))
}
if (log == "2"){
Base <- 2
}
for(x in 1:ncol(data.shan)){
x <- data.shan[, x]
n <- sum(x[x > 0])
S <- length(x[x > 0])
Hshan <- - sum(x[x > 0] / n * log(x[x > 0] / n, Base))
Hmin <- -((n-S+1) / n * log((n - S + 1) / n, Base) + (S - 1) / n * log(1 / n, Base))
Hmax <- log(S, Base)
Even1 <- Hshan / (Hmax)
Even2 <- (Hshan - Hmin) / (Hmax-Hmin)
vec1 <- c(Hshan, Hmin, Hmax)
Htable <- cbind(Htable, new_col = vec1)
vec2 <- c(Even1, Even2)
Etable <- cbind(Etable, new_col = vec2)
}
Htable <- Htable[, -1]
colnames(Htable) <- colnames(data.shan)
rownames(Htable) <- c("H´","Hmin","Hmax")
Htable <- round(Htable, digits = 2)
Etable <- Etable[,-1]
colnames(Etable) <- colnames(data.shan)
rownames(Etable) <- c("Even1","Even2")
Etable <- round(Etable, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5), las = 2)
minH <- min(Htable[2,])
maxH <- max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH, maxH * 1.1),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
points(c(1:ncol(Htable)), Htable[1,], pch = 16, col = col)
table1 <- as.matrix(Htable[2,])
table2 <- as.matrix(Htable[3,])
axis(1, at = 1:ncol(data.shan), lab = colnames(data.shan))
for (i in 1:ncol(table1)){
arrows(i, table1[,i], i, table2[,i], angle = 90, code = 3, length = 0.08, col = col)
}
}
if (table == "CE"){
HEtable <- list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == "C"){
return(Htable)
}
if(table == "E"){
return(Etable)
}
}
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD + 0.2), col = "lightcyan3", ylab = ylab)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.9, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD + 0.2), col = "lightcyan3", ylab = ylab)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 2.5)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 2, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
S <- shannon(test_data.1, col = "red")
shannon <- function(df, first.col = 2, table = "CE", plot = T,
log = "e", ylab = "Shannon index", col = "black", ...){
data.shan <- df[, first.col : ncol(df)]
mat1 <- matrix(nrow = 3)
Htable <- data.frame(mat1)
mat2 <- matrix(nrow = 2)
Etable <- data.frame(mat2)
if (log == "e"){
Base <- sum(1 / factorial(0:100))
}
if (log == "2"){
Base <- 2
}
for(x in 1:ncol(data.shan)){
x <- data.shan[, x]
n <- sum(x[x > 0])
S <- length(x[x > 0])
Hshan <- - sum(x[x > 0] / n * log(x[x > 0] / n, Base))
Hmin <- -((n-S+1) / n * log((n - S + 1) / n, Base) + (S - 1) / n * log(1 / n, Base))
Hmax <- log(S, Base)
Even1 <- Hshan / (Hmax)
Even2 <- (Hshan - Hmin) / (Hmax-Hmin)
vec1 <- c(Hshan, Hmin, Hmax)
Htable <- cbind(Htable, new_col = vec1)
vec2 <- c(Even1, Even2)
Etable <- cbind(Etable, new_col = vec2)
}
Htable <- Htable[, -1]
colnames(Htable) <- colnames(data.shan)
rownames(Htable) <- c("H´","Hmin","Hmax")
Htable <- round(Htable, digits = 2)
Etable <- Etable[,-1]
colnames(Etable) <- colnames(data.shan)
rownames(Etable) <- c("Even1","Even2")
Etable <- round(Etable, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 1, 0.5), las = 2)
minH <- min(Htable[2,])
maxH <- max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH, maxH * 1.1),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n",
ylab = "",...)
title(ylab = ylab, line = 2.5)
points(c(1:ncol(Htable)), Htable[1,], pch = 16, col = col)
table1 <- as.matrix(Htable[2,])
table2 <- as.matrix(Htable[3,])
axis(1, at = 1:ncol(data.shan), lab = colnames(data.shan))
for (i in 1:ncol(table1)){
arrows(i, table1[,i], i, table2[,i], angle = 90, code = 3, length = 0.08, col = col)
}
}
if (table == "CE"){
HEtable <- list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == "C"){
return(Htable)
}
if(table == "E"){
return(Etable)
}
}
S <- shannon(test_data.1, col = "red")
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 1, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1,lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.7, pos = 2)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.7, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.65, pos = 3)
}
if (table == T){
return(tab)
}
}
sim <- simpson(test_data.1)
simpson <- function(df, first.col = 2, table = T, plot = T, ylab = "Simpson´s index value", ...){
data.simps <- df[, first.col:ncol(df)]
mat <- matrix(nrow = 4, ncol = ncol(data.simps))
tab <- data.frame(mat)
D <- apply(data.simps, 2, function(x) sum((x / sum(x)) ^ 2))
Dc <- 1 - D
Dr <- 1 / D
S <- apply(data.simps, 2, function(x1) sum(x1 > 0))
Even <- Dc / S
tab[1,] <- D
tab[2,] <- Dc
tab[3,] <- Dr
tab[4,] <- Even
colnames(tab) <- colnames(data.simps)
rownames(tab) <- c("D", "Dc", "Dr", "Even")
tab <- round(tab, digits = 2)
if (plot == T){
par(mfrow = c(1, 1), mar = c(5, 4, 0.5, 0.5))
maxD <- max(tab[2, ])
posgr <- barplot(Dc, plot = F)
barplot(Dc, ylim = c(0, maxD * 1.2), col = "lightcyan3")
title(ylab = ylab, line = 3)
Dc1 <- round(Dc, digits = 2)
text(posgr, Dc1, lab = Dc1, cex = 0.65, pos = 3)
}
if (table == T){
return(tab)
}
}
