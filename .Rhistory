for (i in 1:ncol(table1)){
arrows(i,table1[,i],i,table2[,i],angle=90,code=3,length=0.08)
}
}
}
if (table == 1){
# cat(SC,"\n")
# print(Htable)
# cat("\n")
# cat(SE,"\n")
# print(Etable)
table1<-list( "Shannon calculations" = Htable, SE = Etable)
print(table1)
}
if(table == 2){
cat(SC,"\n")
return(Htable)
}
if(table == 3){
cat(SE,"\n")
return(Etable)
}
}
Shannon(test_dat)
Shannon<-function(x, first.col = 2, table = 1, graph = T, arrow = T, log_base = 1, ylab = "Shannon index", SC = "Table of Shannon calculations", SE = "Shannon evenness", ...){
data.shan<-x[,first.col:ncol(x)]
mat1<-matrix(nrow = 3)
Htable<-data.frame(mat1)
mat2<-matrix(nrow = 2)
Etable<-data.frame(mat2)
if (log_base == 1){
Base<-sum(1/factorial(0:100))
}
if (log_base == 2){
Base<-2
}
for(x in 1:ncol(data.shan)){
x<-data.shan[,x]
n<-sum(x[x>0])
S<-length(x[x>0])
Hshan<--sum(x[x>0]/n*log(x[x>0]/n,Base))
Hmin<--((n-S+1)/n*log((n-S+1)/n,Base)+(S-1)/n*log(1/n,Base))
Hmax<-log(S,Base)
Even1<-Hshan/(Hmax)
Even2<-(Hshan-Hmin)/(Hmax-Hmin)
vec1<-c(Hshan,Hmin,Hmax)
Htable<-cbind(Htable, new_col = vec1)
vec2<-c(Even1,Even2)
Etable<-cbind(Etable, new_col = vec2)
}
Htable<-Htable[,-1]
colnames(Htable)<-colnames(data.shan)
rownames(Htable)<-c("H´","Hmin","Hmax")
Htable<-round(Htable, digits = 2)
Etable<-Etable[,-1]
colnames(Etable)<-colnames(data.shan)
rownames(Etable)<-c("Even1","Even2")
Etable<-round(Etable, digits = 2)
if (graph == T){
par(mfrow=c(1,1), mar=c(4,4,2,1), las = 2)
minH<-min(Htable[2,])
maxH<-max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH,maxH),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n", ylab = ylab)
points(c(1:ncol(Htable)), Htable[1,], pch = 16)
table1<-as.matrix(Htable[2,])
table2<-as.matrix(Htable[3,])
axis(1,at=1:ncol(data.shan),lab=colnames(data.shan))
if (arrow == T){
for (i in 1:ncol(table1)){
arrows(i,table1[,i],i,table2[,i],angle=90,code=3,length=0.08)
}
}
}
if (table == 1){
HEtable<-list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == 2){
cat(SC,"\n")
return(Htable)
}
if(table == 3){
cat(SE,"\n")
return(Etable)
}
}
Shannon(test_dat)
SH<-Shannon(test_dat)
SH$`Shannon calculations`
MM<-function(x, first.col=2, table = 1, graph = 1, col="gray", textMg = "Margalef´s index", textMn = "Menhinick´s index", font.main = 1, cex.main=1.5, ...){
x<-x[,first.col:ncol(x)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
tabDMg<-matrix()
tabDMn<-matrix()
for (i in 1:ncol(tab)){
DMg<-(tabS[,i]-1)/log(tabN[,i])
tabDMg<-cbind(tabDMg, DMg)
DMn<-(tabS[,i])/sqrt(tabN[,i])
tabDMn<-cbind(tabDMn, DMn)
}
tabDMg<-tabDMg[,-1]
tabDMn<-tabDMn[,-1]
DMg<-round(as.vector(tabDMg), digits = 2)
DMn<-round(as.vector(tabDMn), digits = 2)
tab_Mg_Mn<-rbind(DMg, DMn)
colnames(tab_Mg_Mn)<-colnames(tab)
maxMg<-max(tab_Mg_Mn[1,])
maxMn<-max(tab_Mg_Mn[2,])
if (graph == 1){
par(mfrow=c(2,1), mar=c(3.8,4,2,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), ylab = textMg, font.main = font.main, xaxt = "n",
col = col)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), ylab = textMn, font.main = font.main,
col = col)
}
if (graph == 2){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), main = textMg, cex.main = cex.main, font.main = font.main,
col = col)
}
if (graph == 3){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), main = textMn, cex.main = cex.main, font.main = font.main,
col = col)
}
if (table == 1){
return(tab_Mg_Mn)
}
if (table == 2){
cat(paste(textMg),"\n")
return(tab_Mg_Mn[1,])
}
if (table == 3){
cat(paste(textMn), "\n")
return(tab_Mg_Mn[2,])
}
}
MM(test_dat)
MM(test_dat, table = 3)
MM<-function(x, first.col=2, table = 1, graph = 1, col="gray", textMg = "Margalef´s index", textMn = "Menhinick´s index", font.main = 1, cex.main=1.5, ...){
x<-x[,first.col:ncol(x)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
tabDMg<-matrix()
tabDMn<-matrix()
for (i in 1:ncol(tab)){
DMg<-(tabS[,i]-1)/log(tabN[,i])
tabDMg<-cbind(tabDMg, DMg)
DMn<-(tabS[,i])/sqrt(tabN[,i])
tabDMn<-cbind(tabDMn, DMn)
}
tabDMg<-tabDMg[,-1]
tabDMn<-tabDMn[,-1]
DMg<-round(as.vector(tabDMg), digits = 2)
DMn<-round(as.vector(tabDMn), digits = 2)
tab_Mg_Mn<-rbind(DMg, DMn)
colnames(tab_Mg_Mn)<-colnames(tab)
maxMg<-max(tab_Mg_Mn[1,])
maxMn<-max(tab_Mg_Mn[2,])
if (graph == 1){
par(mfrow=c(2,1), mar=c(3.8,4,2,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), ylab = textMg, font.main = font.main, xaxt = "n",
col = col)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), ylab = textMn, font.main = font.main,
col = col)
}
if (graph == 2){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), main = textMg, cex.main = cex.main, font.main = font.main,
col = col)
}
if (graph == 3){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), main = textMn, cex.main = cex.main, font.main = font.main,
col = col)
}
if (table == 1){
return(tab_Mg_Mn)
}
if (table == 2){
cat(paste(textMg),"\n")
return(tab_Mg_Mn[1,])
}
if (table == 3){
cat(paste(textMn), "\n")
return(cat(paste(textMn), "\n"), tab_Mg_Mn[2,])
}
}
MM(test_dat, table = 3)
MM<-function(x, first.col=2, table = 1, graph = 1, col="gray", textMg = "Margalef´s index", textMn = "Menhinick´s index", font.main = 1, cex.main=1.5, ...){
x<-x[,first.col:ncol(x)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
tabDMg<-matrix()
tabDMn<-matrix()
for (i in 1:ncol(tab)){
DMg<-(tabS[,i]-1)/log(tabN[,i])
tabDMg<-cbind(tabDMg, DMg)
DMn<-(tabS[,i])/sqrt(tabN[,i])
tabDMn<-cbind(tabDMn, DMn)
}
tabDMg<-tabDMg[,-1]
tabDMn<-tabDMn[,-1]
DMg<-round(as.vector(tabDMg), digits = 2)
DMn<-round(as.vector(tabDMn), digits = 2)
tab_Mg_Mn<-rbind(DMg, DMn)
colnames(tab_Mg_Mn)<-colnames(tab)
maxMg<-max(tab_Mg_Mn[1,])
maxMn<-max(tab_Mg_Mn[2,])
if (graph == 1){
par(mfrow=c(2,1), mar=c(3.8,4,2,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), ylab = textMg, font.main = font.main, xaxt = "n",
col = col)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), ylab = textMn, font.main = font.main,
col = col)
}
if (graph == 2){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[1,], ylim = c(0,maxMg + 1), main = textMg, cex.main = cex.main, font.main = font.main,
col = col)
}
if (graph == 3){
par(mfrow=c(1,1), mar=c(3.8,4,4,1), las = 2)
barplot(tab_Mg_Mn[2,], ylim = c(0,maxMn + 1), main = textMn, cex.main = cex.main, font.main = font.main,
col = col)
}
if (table == 1){
return(tab_Mg_Mn)
}
if (table == 2){
cat(paste(textMg),"\n")
return(tab_Mg_Mn[1,])
}
if (table == 3){
cat(paste(textMn), "\n")
return(tab_Mg_Mn[2,])
}
}
MM(test_dat)
Simpson<-function(x, first.col = 2, table = T, graph = T, SC = "Simpson´s calculations", ylab="Simpson´s index", ...){
data.simps<-x[,first.col:ncol(x)]
mat<-matrix(nrow = 4, ncol = ncol(data.simps))
tab<-data.frame(mat)
D<-apply(data.simps,2,function(x) sum((x/sum(x))^2))
Dc<-1-D
Dr<-1/D
S<-apply(data.simps, 2, function(x1) sum(x1>0))
Even<-Dc/S
tab[1,]<-D
tab[2,]<-Dc
tab[3,]<-Dr
tab[4,]<-Even
colnames(tab)<-colnames(data.simps)
rownames(tab)<-c("D","Dc","Dr","Even")
tab<-round(tab, digits = 2)
if (graph == T){
par(mfrow=c(1,1), mar=c(4,4,4,1))
maxD = max(tab[2,])
posgr = barplot(Dc, plot = F)
barplot(Dc, ylim = c(0,maxD+0.2), col = "lightcyan3", ylab = ylab)
Dc1<-round(Dc, digits = 2)
text(posgr,Dc1,lab=Dc1,cex=0.9,pos=3)
}
if (table == T){
cat(SC,"\n")
return(tab)
}
}
Simpson(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(expression("F1"), "F2", "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = 3))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
?expression
?express
?exp
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression("F1"), "F2", "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = 3))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression('F'['1']), "F2", "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = 3))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression(bquote('F'['1'])), "F2", "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = 3))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = 3))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ncol = 3, ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
print(SRtab)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = ncol))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ncol = 3, ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
rownames(SRtab)<-c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other", "Total")
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = ncol))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
Richness<-function(x, first.col = 2, graph = T, legh = 10, legl = 10, col = c("gray0", "gray48", "gray84"), ylab = "Number of species", ncol = 3, ...){
x<-x[,first.col:ncol(x)]
F1<-apply(x, 2, function(f1) sum(f1==1))
F2<-apply(x, 2, function(f2) sum(f2==2))
Other<-apply(x, 2, function(f4) sum(f4>2))
Total<-F1 + F2 + Other
SRtab<-rbind(F1,F2,Other,Total)
maxS<-max(SRtab[1,] + SRtab[2,])
maxS2<-max(SRtab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(4,3,3,0.5), las = 2)
posgr = barplot(SRtab, plot = F)
barplot(SRtab[-4,], ylim = c(0,maxS2 + 5), ylab = ylab,
legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), col=col,
args.legend = list(bty = "n", x = legl, y = maxS2 + legh, ncol = ncol))
text(posgr, Total, lab=Total, cex=0.9, pos=3)
}
return(SRtab)
}
Richness(test_dat)
sn.eco<-function(x, first.col = 2, table = T, graph = T){
x<-x[,first.col:ncol(x)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
rownames(tab)<-c("S (number of species)", "N (abundance)")
if (table == T){
print(tab)
}
if (graph == T){
par(mfrow=c(2,1), mar=c(3.85,4,0,1))
maxS <- max(tab[1,])
maxN <- max(tab[2,])
barplot(tab[1,], ylim = c(0,maxS + 5), ylab = "Number of species", las = 2, xaxt = "n", col = "lightcyan3")
barplot(tab[2,], ylim = c(0, maxN + 50), ylab = "Abundance", las = 2, col = "lightcyan3")
}
}
sn.eco(test_dat)
SN<-function(x, first.col = 2, table = T, graph = T, col = "gray", ylimS = c(0,maxS + 5), ylimN = c(0, maxN + 50),  ylabS = "Number of species", ylabN = "Abundance", ...){
x<-x[,first.col:ncol(x)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
rownames(tab)<-c("S (number of species)", "N (abundance)")
if (graph == T){
par(mfrow=c(2,1), mar=c(3.85,4,0,1), las = 2)
maxS <- max(tab[1,])
maxN <- max(tab[2,])
barplot(tab[1,], ylim = ylimS, ylab = ylabS, xaxt = "n", col = col)
barplot(tab[2,], ylim = ylimN, ylab = ylabN, col = col)
}
if (table == T){
return(tab)
}
}
SN(test_dat)
SN(test_dat, las = 1)
SN(test_dat, las = 1)
Abundance(test_dat)
Abundance(test_dat, las = 1)
SN(test_dat, las = 1)
Abundance(test_dat, las = 1)
SN(test_dat, las = 1)
Abundance<-function(x, first.col = 2, graph = T, legh = 50, legl = 10, ylab = "Abundance",
col = c("gray0", "gray48", "gray84"), ...){
x<-x[,first.col:ncol(x)]
TotalA<-apply(x, 2, function(f5) sum(f5))
F1<-apply(x, 2, function(f1) sum(f1==1))
F2A<-apply(x, 2, function(f2) sum(f2==2))*2
OtherA<-TotalA-F1-F2A
Atab<-rbind(F1,F2A,OtherA,TotalA)
rownames(Atab)<-c("F1", "F2", "Other", "Total")
maxA<-max(Atab[1,] + Atab[2,])
maxA2<-max(Atab[4,])
if (graph == T){
par(mfrow=c(1,1), mar=c(3.85,4,4,0.5), las = 2)
posgr = barplot(Atab, plot = F)
barplot(Atab[-4,],legend.text = c(as.expression(bquote('F'['1'])), as.expression(bquote('F'['2'])), "Other"), ylab = ylab, ylim = c(0, maxA2 + 30), col = col,
args.legend = list(bty = "n", x = legl, y = maxA2 + legh, ncol = 3), ...)
text(posgr, TotalA, lab = TotalA, cex = 0.9, pos = 3)
}
return(Atab)
}
Abundance(test_dat, las = 1)
library(available)
available(biodiva)
available(biodiva, browse = T)
