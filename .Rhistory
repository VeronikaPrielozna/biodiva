rm(M)
margalef <- function(df, first.col = 2, plot = T, col = "gray", ylab = "Margalef's index value", xlab = "Samples", ...){
x <- df[, first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
vec_DMn<-c()
for (i in 1:ncol(tab)){
DMn<-(tabS[,i])/sqrt(tabN[,i])
vec_DMn<-append(vec_DMn, DMn)
}
DMn<-round(vec_DMn, digits = 2)
names(DMn)<-colnames(tab)
maxMn<-max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(4,4, 0.5, 0.5), las = 2)
barplot(DMn, ylim = c(0,maxMn + 1), col = col)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMn)
}
menhinick(test_data.1)
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
vec_DMn<-c()
for (i in 1:ncol(tab)){
DMn<-(tabS[,i])/sqrt(tabN[,i])
vec_DMn<-append(vec_DMn, DMn)
}
DMn<-round(vec_DMn, digits = 2)
names(DMn)<-colnames(tab)
maxMn<-max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(DMn, ylim = c(0,maxMn + 1), col = col, xaxs = "r")
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMn)
}
menhinick(test_data.1)
menhinick(test_data.1, col = "darkcyan")
#' @param ylab
#' @param xlab
#' @param col
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
#'
margalef <- function(df, first.col = 2, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- df[, first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 2)
title(xlab = xlab, line = 4)
}
return(DMg)
}
M <- margalef(test_data.1, col = "darkcyan")
#' @param ylab
#' @param xlab
#' @param col
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
#'
margalef <- function(df, first.col = 2, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- df[, first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
M <- margalef(test_data.1, col = "darkcyan")
menhinick(test_data.1, col = "darkcyan")
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
vec_DMn<-c()
for (i in 1:ncol(tab)){
DMn<-(tabS[,i])/sqrt(tabN[,i])
vec_DMn<-append(vec_DMn, DMn)
}
DMn<-round(vec_DMn, digits = 2)
names(DMn)<-colnames(tab)
maxMn<-max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(DMn, ylim = c(0,maxMn + 1), col = col, xaxs = "r")
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
menhinick(test_data.1, col = "darkcyan")
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S<-apply(x, 2, function(x1) sum(x1>0))
N<-apply(x, 2, sum, na.rm = TRUE)
tab<-rbind(S,N)
tabS<-matrix(S, nrow = 1)
tabN<-matrix(N, nrow = 1)
vec_DMn<-c()
for (i in 1:ncol(tab)){
DMn<-(tabS[,i])/sqrt(tabN[,i])
vec_DMn<-append(vec_DMn, DMn)
}
DMn<-round(vec_DMn, digits = 2)
names(DMn)<-colnames(tab)
maxMn<-max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(DMn, ylim = c(0,maxMn * 1.25), col = col, xaxs = "r")
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
menhinick(test_data.1, col = "darkcyan")
M <- menhinick(test_data.1, col = "darkcyan")
#' @param ylab
#' @param xlab
#' @param col
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
#'
margalef <- function(df, first.col = 2, plot = T, ylab = "Margalef's index value", xlab = "Samples", col = "gray", ...){
x <- df[, first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMg_m <- matrix()
for (i in 1:ncol(tab)){
DMg <- (tabS[,i] - 1) / log(tabN[,i])
DMg_m <- rbind(DMg_m, DMg)
}
DMg_m <- as.data.frame(DMg_m[2:nrow(DMg_m),1])
colnames(DMg_m) <- "D"
DMg_m <- round(DMg_m, digits = 2)
DMg <- DMg_m[,1,drop = F]
rownames(DMg) <- as.vector(colnames(tab))
maxMg <- max(DMg)
if (plot == T){
par(mfrow = c(1,1), mar = c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMg_m)), ylim = c(0, maxMg * 1.25), names.arg = rownames(DMg), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 3)
title(xlab = xlab, line = 4)
}
return(DMg)
}
M <- margalef(test_data.1, col = "darkcyan")
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMn_m <- matrix()
for (i in 1:ncol(tab)){
DMn <- (tabS[,i]) / sqrt(tabN[,i])
DMn_m <- rbind(DMn_m, DMn)
}
DMn<-round(vec_DMn, digits = 2)
names(DMn)<-colnames(tab)
maxMn<-max(DMn)
DMn_m <- as.data.frame(DMn_m[2:nrow(DMn_m),1])
colnames(DMn_m) <- "D"
DMn_m <- round(DMn_m, digits = 2)
DMn <- DMn_m[,1,drop = F]
rownames(DMn) <- as.vector(colnames(tab))
maxMn <- max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMn_m)), ylim = c(0, maxMn * 1.25), names.arg = rownames(DMn), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
M <- menhinick(test_data.1, col = "darkcyan")
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMn_m <- matrix()
for (i in 1:ncol(tab)){
DMn <- (tabS[,i]) / sqrt(tabN[,i])
DMn_m <- rbind(DMn_m, DMn)
}
DMn_m <- as.data.frame(DMn_m[2:nrow(DMn_m),1])
colnames(DMn_m) <- "D"
DMn_m <- round(DMn_m, digits = 2)
DMn <- DMn_m[,1,drop = F]
rownames(DMn) <- as.vector(colnames(tab))
maxMn <- max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMn_m)), ylim = c(0, maxMn * 1.25), names.arg = rownames(DMn), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
M <- menhinick(test_data.1, col = "darkcyan")
M
rm(abundance)
rm(dominance)
menhinick <- function(df, first.col = 2, plot = T, col = "gray",
ylab = "Menhinick´s index value", xlab = "Samples", ...){
x <- df[,first.col:ncol(df)]
S <- apply(x, 2, function(x1) sum(x1 > 0))
N <- apply(x, 2, sum, na.rm = TRUE)
tab <- rbind(S, N)
tabS <- matrix(S, nrow = 1)
tabN <- matrix(N, nrow = 1)
DMn_m <- matrix()
for (i in 1:ncol(tab)){
DMn <- (tabS[,i]) / sqrt(tabN[,i])
DMn_m <- rbind(DMn_m, DMn)
}
DMn_m <- as.data.frame(DMn_m[2:nrow(DMn_m),1])
colnames(DMn_m) <- "D"
DMn_m <- round(DMn_m, digits = 2)
DMn <- DMn_m[,1,drop = F]
rownames(DMn) <- as.vector(colnames(tab))
maxMn <- max(DMn)
if (plot == T){
par(mfrow=c(1,1), mar=c(5, 4, 0.5, 0.5), las = 2)
barplot(as.table(t(DMn_m)), ylim = c(0, maxMn * 1.25), names.arg = rownames(DMn), col = col, xaxs = "r", ...)
title(ylab = ylab, line = 2.5)
title(xlab = xlab, line = 4)
}
return(DMn)
}
M <- menhinick(test_data.1, col = "darkcyan")
shannon <- function(x, first.col = 2, table = 1, graph = T, arrow = T, log_base = 1, ylab = "Shannon index", SC = "Table of Shannon calculations", SE = "Shannon evenness", ...){
data.shan<-x[,first.col:ncol(x)]
mat1<-matrix(nrow = 3)
Htable<-data.frame(mat1)
mat2<-matrix(nrow = 2)
Etable<-data.frame(mat2)
if (log_base == 1){
Base<-sum(1/factorial(0:100))
}
if (log_base == 2){
Base<-2
}
for(x in 1:ncol(data.shan)){
x<-data.shan[,x]
n<-sum(x[x>0])
S<-length(x[x>0])
Hshan<--sum(x[x>0]/n*log(x[x>0]/n,Base))
Hmin<--((n-S+1)/n*log((n-S+1)/n,Base)+(S-1)/n*log(1/n,Base))
Hmax<-log(S,Base)
Even1<-Hshan/(Hmax)
Even2<-(Hshan-Hmin)/(Hmax-Hmin)
vec1<-c(Hshan,Hmin,Hmax)
Htable<-cbind(Htable, new_col = vec1)
vec2<-c(Even1,Even2)
Etable<-cbind(Etable, new_col = vec2)
}
Htable<-Htable[,-1]
colnames(Htable)<-colnames(data.shan)
rownames(Htable)<-c("H´","Hmin","Hmax")
Htable<-round(Htable, digits = 2)
Etable<-Etable[,-1]
colnames(Etable)<-colnames(data.shan)
rownames(Etable)<-c("Even1","Even2")
Etable<-round(Etable, digits = 2)
if (graph == T){
par(mfrow=c(1,1), mar=c(4,4,2,1), las = 2)
minH<-min(Htable[2,])
maxH<-max(Htable[3,])
posgr = barplot(as.matrix(Htable[1,]), plot = F)
plot(NULL,ylim = c(minH,maxH),xlim = c(1,ncol(data.shan)), xlab = "", xaxt = "n", ylab = ylab)
points(c(1:ncol(Htable)), Htable[1,], pch = 16)
table1<-as.matrix(Htable[2,])
table2<-as.matrix(Htable[3,])
axis(1,at=1:ncol(data.shan),lab=colnames(data.shan))
if (arrow == T){
for (i in 1:ncol(table1)){
arrows(i,table1[,i],i,table2[,i],angle=90,code=3,length=0.08)
}
}
}
if (table == 1){
HEtable<-list( "Shannon calculations" = Htable, "Shannon evenness" = Etable)
return(HEtable)
}
if(table == 2){
cat(SC,"\n")
return(Htable)
}
if(table == 3){
cat(SE,"\n")
return(Etable)
}
}
devtools::load_all(".")
## code to prepare `DATASET` dataset goes here
library(readxl)
test_data<-read_excel("data-raw/test_data.xlsx")
usethis::use_data(test_data, overwrite = TRUE)
sinew::makeOxygen(test_data, add_fields = "source")
